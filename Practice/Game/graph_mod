module graph_mod(clk, rst, x, y, key, key_pulse, rgb);

input clk, rst;
input [9:0] x, y;
input [4:0] key, key_pulse;
output [11:0] rgb;

parameter MAX_X = 640; 
parameter MAX_Y = 480; 

parameter WALL_TOP = 30;
parameter WALL_BOTTOM = 470;
parameter WALL_LEFT = 20;
parameter WALL_RIGHT = 630;

// PLAYER 1 SIZE
parameter PLAYER1_X_SIZE = 20;
parameter PLAYER1_Y_SIZE = 20;

// PLAYER 2 SIZE
parameter PLAYER2_X_SIZE = 20;
parameter PLAYER2_Y_SIZE = 20;

// BULLET SIZE 
parameter BULLET_X_SIZE = 5; 
parameter BULLET_Y_SIZE = 10;


// Frame_tick
wire frame_tick;
assign frame_tick = (y == MAX_Y - 1 && x == MAX_X - 1) ? 1 : 0;

// 1초 단위의 frame_tick 생성
reg [6:0] frame_tick_counter; // 7비트 카운터: 최대 127까지 카운트 가능
wire halfsec_frame_tick;

// frame_tick_counter 동작
always @(posedge clk or posedge rst) begin
    if (rst) begin
        frame_tick_counter <= 0;
    end else if (frame_tick) begin
        if (frame_tick_counter == 29) begin
            frame_tick_counter <= 0; // 59번째 frame_tick에서 카운터 초기화
        end else begin
            frame_tick_counter <= frame_tick_counter + 1;
        end
    end
end

// 1초 단위 신호 생성
assign halfsec_frame_tick = (frame_tick && frame_tick_counter == 29) ? 1:0;

reg [2:0] c_state, n_state;

// 총알
reg [7:0] bullets;              //기본 총알
reg [7:0] upgrade_bullets;      //upgrade된 총알 




// ---------------------------------------------------
// Player1 Logic
// 6: 위 / 3: 아래 / A: 오른쪽 / 2 : 왼쪽 / 1 : 공격
// ---------------------------------------------------

//Player1의 위치 
parameter PLAYER1_RESET_X_POSITION = 100;
parameter PLAYER1_RESET_Y_POSITION = 300;

wire [9:0] player1_b, player1_t, player1_r, player1_l;
wire reach_p1_bottom, reach_p1_top, reach_p1_right, reach_p1_left;
wire player1_on;
reg [9:0] c_player1_b,c_player1_t,c_player1_r,c_player1_l;
reg [9:0] n_player1_b, n_player1_t, n_player1_r, n_player1_l;

assign player1_b = c_player1_t + PLAYER1_Y_SIZE-1;
assign player1_t = c_player1_t;
assign player1_r = c_player1_l + PLAYER1_X_SIZE-1;
assign player1_l = c_player1_l;

//assign player1_on = (x <= player1_r && x >= player1_l && y <= player1_b && y >= player1_t) ? 1:0;
assign player1_on = (x == player1_l && (y+6) == player1_b) || (x == player1_l && (y+7) == player1_b) 
                    || (x == player1_l && (y+8) == player1_b) || (x == player1_l && (y+9) == player1_b) || (x == player1_l && (y+9) == player1_b)   
                    || (x == player1_l && (y+10) == player1_b) || (x == player1_l && (y+11) == player1_b) || (x == player1_l && (y+12) == player1_b) ||(x == player1_l && (y+13) == player1_b) || (x == player1_l && (y+14) == player1_b) ||
                    ((x+1) == player1_l && (y+4) == player1_b) || ((x+1) == player1_l && (y+5) == player1_b) || ((x+1) == player1_l && (y+15) == player1_b) || ((x+2) == player1_l && (y+4) == player1_b) || 
                    ((x+2) == player1_l && (y+15) == player1_b) || ((x+3) == player1_l && (y+2) == player1_b) || ((x+3) == player1_l && (y+3) == player1_b) || ((x+3) == player1_l && (y+16) == player1_b) ||
                    ((x+3) == player1_l && (y+17) == player1_b) || ((x+4) == player1_l && (y+2) == player1_b) || ((x+4) == player1_l && (y+8) == player1_b) || ((x+4) == player1_l && (y+17) == player1_b) ||
                    ((x+5) == player1_l && (y+1) == player1_b) ||((x+5) == player1_l && (y+7) == player1_b) || ((x+5) == player1_l && (y+18) == player1_b) || ((x+6) == player1_l && y == player1_b) ||
                    ((x+6) == player1_l && (y+8) == player1_b) || ((x+6) == player1_l && (y+19) == player1_b) || ((x+7) == player1_l && y == player1_b) || ((x+7) == player1_l && (y+19) == player1_b) || 
                    ((x+8) == player1_l && y == player1_b) || ((x+8) == player1_l && (y+13) == player1_b) || ((x+8) == player1_l && (y+14) == player1_b) || ((x+8) == player1_l && (y+19) == player1_b) || 
                    ((x+9) == player1_l && y == player1_b) || ((x+9) == player1_l && (y+13) == player1_b) || ((x+9) == player1_l && (y+14) == player1_b) || ((x+9) == player1_l && (y+19) == player1_b) ||
                    ((x+10) == player1_l && y == player1_b) || ((x+10) == player1_l && (y+13) == player1_b) || ((x+10) == player1_l && (y+14) == player1_b) || ((x+10) == player1_l && (y+19) == player1_b) ||
                    ((x+11) == player1_l && y == player1_b) || ((x+11) == player1_l && (y+13) == player1_b) || ((x+11) == player1_l && (y+14) == player1_b) || ((x+11) == player1_l && (y+19) == player1_b) ||
                    ((x+12) == player1_l && y == player1_b) || ((x+12) == player1_l && (y+13) == player1_b) || ((x+12) == player1_l && (y+14) == player1_b) || ((x+12) == player1_l && (y+19) == player1_b) ||
                    ((x+13) == player1_l && y == player1_b) || ((x+13) == player1_l && (y+8) == player1_b) || ((x+13) == player1_l && (y+19) == player1_b) || ((x+14) == player1_l && y == player1_b) ||
                    ((x+14) == player1_l && (y+7) == player1_b) || ((x+14) == player1_l && (y+19) == player1_b) || ((x+15) == player1_l && y == player1_b) || ((x+15) == player1_l && (y+8) == player1_b) || 
                    ((x+15) == player1_l && (y+19) == player1_b) || ((x+16) == player1_l && (y+1) == player1_b) || ((x+16) == player1_l && (y+17) == player1_b) || ((x+17) == player1_l && (y+2) == player1_b) ||
                    ((x+18) == player1_l && (y+17) == player1_b) || ((x+19) == player1_l && (y+4) == player1_b) || ((x+19) == player1_l && (y+15) == player1_b) || ((x+20) == player1_l && (y+4) == player1_b) ||
                    ((x+20) == player1_l && (y+15) == player1_b) || ((x+21) == player1_l && (y+6) == player1_b) || ((x+21) == player1_l && (y+7) == player1_b) || ((x+21) == player1_l && (y+8) == player1_b) ||
                    ((x+21) == player1_l && (y+9) == player1_b) || ((x+21) == player1_l && (y+10) == player1_b) || ((x+21) == player1_l && (y+11) == player1_b) || ((x+21) == player1_l && (y+12) == player1_b) ||
                    ((x+21) == player1_l && (y+13) == player1_b)&& (player2_hp != 0)? 1:0;


// Player1 Move Logic
always @(*) begin 
    if(frame_tick == 1 && key == 5'h16) begin
        if( ~reach_p1_top) begin
            n_player1_t = c_player1_t + 2;
        end
        else begin 
            n_player1_t = c_player1_t;
        end 
    end 
    else if(frame_tick == 1 && key == 5'h13) begin  //아래 이동 
        if( ~reach_p1_bottom) begin
            n_player1_t = c_player1_t - 2;
        end
        else begin 
            n_player1_t = c_player1_t;
        end 
    end 
    else if(frame_tick == 1 && key == 5'h1A) begin  //오른쪽 이동
        if( ~reach_p1_right) begin
            n_player1_l = c_player1_l + 2;
        end
        else begin 
            n_player1_l = c_player1_l;
        end 
    end 
    else if(frame_tick == 1 && key == 5'h12) begin  //왼쪽 이동
        if( ~reach_p1_left) begin
            n_player1_l = c_player1_l - 2;
        end
        else begin 
            n_player1_l = c_player1_l;
        end 
    end 
    else begin 
        n_player1_t = c_player1_t;
        n_player1_l = c_player1_l;
    end
end

always @ (posedge clk or posedge rst) begin
    if (rst) begin 
        c_player1_t <= PLAYER1_RESET_Y_POSITION;
        c_player1_l <= PLAYER1_RESET_X_POSITION;

    end 
    else begin 
        c_player1_t <= n_player1_t;
        c_player1_l <= n_player1_l;
    end
end 


// Player1의 총알 
wire [9:0] player1_bullet_b, player1_bullet_t, player1_bullet_r, player1_bullet_l;
wire player1_bullet_on;
reg [9:0] c_player1_bullet_b,c_player1_bullet_t,c_player1_bullet_r,c_player1_bullet_l;
reg [9:0] n_player1_bullet_b, n_player1_bullet_t, n_player1_bullet_r, n_player1_bullet_l;

assign player1_bullet_on = (x <= player1_bullet_r && x >= player1_bullet_l && y <= player1_bullet_b && y >= player1_bullet_t) ? 1:0;


assign player1_bullet_b = c_player1_bullet_t + BULLET_Y_SIZE - 1;
assign player1_bullet_t = c_player1_bullet_t;
assign player1_bullet_r = c_player1_bullet_l + BULLET_X_SIZE - 1;
assign player1_bullet_l = c_player1_bullet_l;

// Player1의 총알 Active Signal
wire reach_p1_b_bottom, reach_p1_b_top, reach_p1_b_right, reach_p1_b_left;
wire reach_p1_b_boss;
wire player1_finish_attack;
reg player1_current_bullet_active, player1_next_bullet_active;
reg player1_current_attack, player1_next_attack;

assign reach_p1_b_top = (c_player1_bullet_t >= MAX_Y) ? 1 : 0;
assign reach_p1_b_boss = (c_player1_bullet_t >= boss_b && c_player1_bullet_r >= boss_l 
                            && c_player1_bullet_l <= boss_r && c_player1_bullet_b <= boss_t) ? 1 : 0;

//assign reach_p1_b_left = (c_player1_bullet_t <= MAX_Y) ? 1 : 0;
//assign reach_p1_b_right = (c_player1_bullet_t <= MAX_Y) ? 1 : 0;
assign player1_finish_attack = (reach_p1_b_top); 

// Player1 Attact Logic
always @(*) begin 
    if(key_pulse == 5'h11) 
        player1_next_bullet_active = 1;
    else if (reach_p1_b_top || reach_p1_b_boss)
        player1_next_bullet_active = 0;
    else 
        player1_next_bullet_active = player1_current_bullet_active;
end 

always @ (posedge clk or posedge rst) begin
    if (rst) begin 
        player1_current_bullet_active <= 0;
    end 
    else begin 
        player1_current_bullet_active <= player1_next_bullet_active;
    end
end 

always @(*) begin 
    if(player1_current_bullet_active) begin 
        if(frame_tick)
           n_player1_bullet_t = c_player1_bullet_t - BULLET_SPEED;      
        else 
           n_player1_bullet_t = c_player1_bullet_t;     
    end
    else begin
        n_player1_bullet_t = player1_t + 3;
        n_player1_bullet_l = player1_l + 5;
    end
end 

always @ (posedge clk or posedge rst) begin
    if (rst) begin 
        c_player1_bullet_t <= player1_t + 3;
        c_player1_bullet_l <= player1_l + 10;
    end 
    
    else begin 
        c_player1_bullet_t <= n_player1_bullet_t;
        c_player1_bullet_l <= n_player1_bullet_l;
    end
end 



// ---------------------------------------------------
// Player2 Logic
// 9: 위 / E : 아래 / D : 오른쪽 / F : 왼쪽 / 0 : 공격
// ---------------------------------------------------

//Player2의 위치 
parameter PLAYER2_RESET_X_POSITION = 400;
parameter PLAYER2_RESET_Y_POSITION = 300;

wire [9:0] player2_b, player2_t, player2_r, player2_l;
wire reach_p2_bottom, reach_p2_top, reach_p2_right, reach_p2_left;
wire player2_on;
reg [9:0] c_player2_b,c_player2_t,c_player2_r,c_player2_l;
reg [9:0] n_player2_b, n_player2_t, n_player2_r, n_player2_l;

assign reach_p2_bottom = (c_player2_t + PLAYER2_Y_SIZE-1 >= WALL_BOTTOM) ? 1: 0;
assign reach_p2_top = (c_player2_t <= WALL_TOP) ? 1: 0;
assign reach_p2_right = (c_player2_l + PLAYER2_X_SIZE-1 >= WALL_RIGHT) ? 1: 0;
assign reach_p2_left = (c_player2_l <= WALL_LEFT) ? 1: 0;


assign player2_b = player2_t + PLAYER2_Y_SIZE-1;
assign player2_t = c_player2_t;
assign player2_r = player2_l + PLAYER2_X_SIZE-1;
assign player2_l = c_player2_l;

//assign player2_on = (x <= player2_r && x >= player2_l && y <= player2_b && y >= player2_t) ? 1:0;
/*
assign player2_on = (x == player2_l && (y+6) == player2_b) || (x == player2_l && (y+7) == player2_b) 
                    || (x == player2_l && (y+8) == player2_b) || (x == player2_l && (y+9) == player2_b) || (x == player2_l && (y+9) == player2_b)   
                    || (x == player2_l && (y+10) == player2_b) || (x == player2_l && (y+11) == player2_b) || (x == player2_l && (y+12) == player2_b) ||(x == player2_l && (y+13) == player2_b) || (x == player2_l && (y+14) == player2_b) ||
                    ((x+1) == player2_l && (y+4) == player2_b) || ((x+1) == player2_l && (y+5) == player2_b) || ((x+1) == player2_l && (y+15) == player2_b) || ((x+2) == player2_l && (y+4) == player2_b) || 
                    ((x+2) == player2_l && (y+15) == player2_b) || ((x+3) == player2_l && (y+2) == player2_b) || ((x+3) == player2_l && (y+3) == player2_b) || ((x+3) == player2_l && (y+16) == player2_b) ||
                    ((x+3) == player2_l && (y+17) == player2_b) || ((x+4) == player2_l && (y+2) == player2_b) || ((x+4) == player2_l && (y+8) == player2_b) || ((x+4) == player2_l && (y+17) == player2_b) ||
                    ((x+5) == player2_l && (y+1) == player2_b) ||((x+5) == player2_l && (y+7) == player2_b) || ((x+5) == player2_l && (y+18) == player2_b) || ((x+6) == player2_l && y == player2_b) ||
                    ((x+6) == player2_l && (y+8) == player2_b) || ((x+6) == player2_l && (y+19) == player2_b) || ((x+7) == player2_l && y == player2_b) || ((x+7) == player2_l && (y+19) == player2_b) || 
                    ((x+8) == player2_l && y == player2_b) || ((x+8) == player2_l && (y+13) == player2_b) || ((x+8) == player2_l && (y+14) == player2_b) || ((x+8) == player2_l && (y+19) == player2_b) || 
                    ((x+9) == player2_l && y == player2_b) || ((x+9) == player2_l && (y+13) == player2_b) || ((x+9) == player2_l && (y+14) == player2_b) || ((x+9) == player2_l && (y+19) == player2_b) ||
                    ((x+10) == player2_l && y == player2_b) || ((x+10) == player2_l && (y+13) == player2_b) || ((x+10) == player2_l && (y+14) == player2_b) || ((x+10) == player2_l && (y+19) == player2_b) ||
                    ((x+11) == player2_l && y == player2_b) || ((x+11) == player2_l && (y+13) == player2_b) || ((x+11) == player2_l && (y+14) == player2_b) || ((x+11) == player2_l && (y+19) == player2_b) ||
                    ((x+12) == player2_l && y == player2_b) || ((x+12) == player2_l && (y+13) == player2_b) || ((x+12) == player2_l && (y+14) == player2_b) || ((x+12) == player2_l && (y+19) == player2_b) ||
                    ((x+13) == player2_l && y == player2_b) || ((x+13) == player2_l && (y+8) == player2_b) || ((x+13) == player2_l && (y+19) == player2_b) || ((x+14) == player2_l && y == player2_b) ||
                    ((x+14) == player2_l && (y+7) == player2_b) || ((x+14) == player2_l && (y+19) == player2_b) || ((x+15) == player2_l && y == player2_b) || ((x+15) == player2_l && (y+8) == player2_b) || 
                    ((x+15) == player2_l && (y+19) == player2_b) || ((x+16) == player2_l && (y+1) == player2_b) || ((x+16) == player2_l && (y+17) == player2_b) || ((x+17) == player2_l && (y+2) == player2_b) ||
                    ((x+18) == player2_l && (y+17) == player2_b) || ((x+19) == player2_l && (y+4) == player2_b) || ((x+19) == player2_l && (y+15) == player2_b) || ((x+20) == player2_l && (y+4) == player2_b) ||
                    ((x+20) == player2_l && (y+15) == player2_b) || ((x+21) == player2_l && (y+6) == player2_b) || ((x+21) == player2_l && (y+7) == player2_b) || ((x+21) == player2_l && (y+8) == player2_b) ||
                    ((x+21) == player2_l && (y+9) == player2_b) || ((x+21) == player2_l && (y+10) == player2_b) || ((x+21) == player2_l && (y+11) == player2_b) || ((x+21) == player2_l && (y+12) == player2_b) ||
                    ((x+21) == player2_l && (y+13) == player2_b) && (player2_hp != 0)? 1:0 ;
                    */
// Player2 Move Logic
always @(*) begin 
    if(frame_tick == 1 && key == 5'h1E) begin
        if( ~reach_p2_top) begin
            n_player2_t = c_player2_t + 2;
        end
        else begin 
            n_player2_t = c_player2_t;
        end 
    end 
    else if(frame_tick == 1 && key == 5'h19) begin  //아래 이동 
        if( ~reach_p2_bottom) begin
            n_player2_t = c_player2_t - 2;
        end
        else begin 
            n_player2_t = c_player2_t;
        end 
    end 
    else if(frame_tick == 1 && key == 5'h1D) begin  //오른쪽 이동
        if( ~reach_p2_right) begin
            n_player2_l = c_player2_l + 2;
        end
        else begin 
            n_player2_l = c_player2_l;
        end 
    end 
    else if(frame_tick == 1 && key == 5'h1F) begin  //왼쪽 이동
        if( ~reach_p2_left) begin
            n_player2_l = c_player2_l - 2;
        end
        else begin 
            n_player2_l = c_player2_l;
        end 
    end 
    else begin 
        n_player2_t = c_player2_t;
        n_player2_l = c_player2_l;
    end
end

always @ (posedge clk or posedge rst) begin
    if (rst) begin 
        c_player2_t <= PLAYER2_RESET_Y_POSITION;
        c_player2_l <= PLAYER2_RESET_X_POSITION;
    end 
    else begin 
        c_player2_t <= n_player2_t;
        c_player2_l <= n_player2_l;
    end
end 

// Player2의 총알 
wire [9:0] player2_bullet_b, player2_bullet_t, player2_bullet_r, player2_bullet_l;
parameter BULLET_SPEED = 10;
wire player2_bullet_on;
reg [9:0] c_player2_bullet_b,c_player2_bullet_t,c_player2_bullet_r,c_player2_bullet_l;
reg [9:0] n_player2_bullet_b, n_player2_bullet_t, n_player2_bullet_r, n_player2_bullet_l;

assign player2_bullet_on = (x <= player2_bullet_r && x >= player2_bullet_l && y <= player2_bullet_b && y >= player2_bullet_t) ? 1:0;


assign player2_bullet_b = c_player2_bullet_t + BULLET_Y_SIZE - 1;
assign player2_bullet_t = c_player2_bullet_t;
assign player2_bullet_r = c_player2_bullet_l + BULLET_X_SIZE - 1;
assign player2_bullet_l = c_player2_bullet_l;

// Player2의 총알 Active Signal
wire reach_p2_b_bottom, reach_p2_b_top, reach_p2_b_right, reach_p2_b_left;
wire reach_p2_b_boss;
wire player2_finish_attack;
reg player2_current_bullet_active, player2_next_bullet_active;
reg player2_current_attack, player2_next_attack;

assign reach_p2_b_top = (c_player2_bullet_t >= MAX_Y) ? 1 : 0;
assign reach_p2_b_boss = (c_player2_bullet_t >= boss_b && c_player2_bullet_r >= boss_l 
                            && c_player2_bullet_l <= boss_r && c_player2_bullet_b <= boss_t) ? 1 : 0;
assign player2_finish_attack = (reach_p2_b_top); 

// Player2 Attack Logic
always @(*) begin 
    if(key_pulse == 5'h10) 
         player2_next_bullet_active = 1;
    else if (reach_p2_b_top || reach_p2_b_boss)
        player2_next_bullet_active = 0;
    else 
        player2_next_bullet_active = player2_current_bullet_active;
end 

always @ (posedge clk or posedge rst) begin
    if (rst) begin 
        player2_current_bullet_active <= 0;
    end 
    else begin 
        player2_current_bullet_active <= player2_next_bullet_active;
    end
end 

always @(*) begin 
    if(player2_current_bullet_active) begin 
        if(frame_tick) begin
           n_player2_bullet_t = c_player2_bullet_t - BULLET_SPEED;      
           //n_player2_bullet_l = c_player2_bullet_l;
        end
        else begin
           n_player2_bullet_t = c_player2_bullet_t;
           //n_player2_bullet_l = c_player2_bullet_l;     
        end
    end
    else begin
        n_player2_bullet_t = player2_t + 3;
        n_player2_bullet_l = player2_l + 5;
    end
end 

always @ (posedge clk or posedge rst) begin
    if (rst) begin 
        c_player2_bullet_t <= player2_t + 8;
        c_player2_bullet_l <= player2_l - 2;
    end 
    
    else begin 
        c_player2_bullet_t <= n_player2_bullet_t;
        c_player2_bullet_l <= n_player2_bullet_l;
    end
end 

// BOSS ATTACK SIZE 
parameter BOSS_X_SIZE = 50; 
parameter BOSS_Y_SIZE = 50;
 
// Boss HP
wire [9:0] boss_hp_bar;

wire boss_on;
// BOSS의 위치 
wire [9:0]  boss_b, boss_t ,boss_r, boss_l;
reg [9:0] current_boss_x, current_boss_y, next_boss_x ,next_boss_y;

assign boss_on = (x <= boss_r && x >= boss_l && y <= boss_b && y <= boss_t) ? 1:0;



assign boss_b = boss_t + BOSS_Y_SIZE - 1;
assign boss_t = current_boss_y;
assign boss_l = current_boss_x;
assign boss_r = boss_l + BOSS_X_SIZE - 1;



//assign player_shot = (c_state == PLAYER_TURN && key_pulse == 5'h11);
//assign player_change_direction = (c_state == PLAYER_TURN && key_pulse == 5'h12);


// Boss가 총알을 맞은 경우 
wire hit_P1toB_bullet;  // player 1의 총알을 맞았을 때 
wire hit_P2toB_bullet;  // player 2의 총알을 맞았을 때


parameter BOSS_RESET_X_POSITION = MAX_X / 2;
parameter BOSS_RESET_Y_POSITION = 100;
parameter BOSS_MOVE_Y = 1;
parameter BOSS_MOVE_X = 1;
parameter BOSS_HP_BAR_X = 180;
parameter BOSS_HP_BAR_MAX = 320;
parameter BOSS_HP_BAR_Y_T = 10;
parameter BOSS_HP_BAR_Y_B = 20;
reg [9:0] c_boss_hp_x_l, n_boss_hp_x_l; 

assign boss_hp_bar_on = (x>=  BOSS_HP_BAR_X && x< BOSS_HP_BAR_X + c_boss_hp_x_l && y >= BOSS_HP_BAR_Y_T && y <= BOSS_HP_BAR_Y_B) ? 1:0;

wire boss_reach_rightwall;
wire boss_reach_leftwall;

assign boss_reach_rightwall = (current_boss_x + BOSS_X_SIZE >= WALL_RIGHT) ? 1 : 0;
assign boss_reach_leftwall = (current_boss_x <= WALL_LEFT) ? 1 : 0;

assign hit_P1toB_bullet = (player1_bullet_l <= boss_r && player1_bullet_r >=  boss_l && player1_bullet_t <= boss_b && player1_bullet_b >= boss_t) ? 1:0;
assign hit_P2toB_bullet = (player2_bullet_l <= boss_r && player2_bullet_r >=  boss_l && player2_bullet_t <= boss_b && player2_bullet_b >= boss_t) ? 1:0;

always @(*) begin 
    if (hit_P1toB_bullet) begin 
        n_boss_hp_x_l = c_boss_hp_x_l - 5; 
    end
    else if(hit_P2toB_bullet) begin
        n_boss_hp_x_l = c_boss_hp_x_l - 5; 
    end
    else 
        n_boss_hp_x_l = c_boss_hp_x_l; 
end

always @(posedge clk or posedge rst) begin 
    if (rst) begin 
        c_boss_hp_x_l <= BOSS_HP_BAR_MAX;
    end
    else if (frame_tick == 1) begin
        c_boss_hp_x_l <= n_boss_hp_x_l;
    end
end

reg[9:0] current_boss_vx, next_boss_vx;

always @* begin
    if (boss_reach_rightwall) next_boss_vx = -1*BOSS_MOVE_X; //벽에 부딪히면 오른쪽으로
    else if (boss_reach_leftwall) next_boss_vx = BOSS_MOVE_X; 
    else next_boss_vx = current_boss_vx; //아니면 가던 방향으로
end

always @(posedge clk, posedge rst) begin
    if (rst) begin
        current_boss_vx <= -1*BOSS_MOVE_X; 
    end
    else begin
        current_boss_vx <= next_boss_vx; 
    end
end


// BOSS_MOVE
always @(*) begin 
    if (frame_tick) begin 
        next_boss_x = current_boss_x + current_boss_vx;
    end 
    else begin
        next_boss_x = current_boss_x;
        //next_boss_y = current_boss_y;
    end
end

always @(posedge clk or posedge rst) begin
    if (rst) begin
        current_boss_x  <= BOSS_RESET_X_POSITION;
        current_boss_y  <= BOSS_RESET_Y_POSITION;
    end 
    else begin 
        current_boss_x  <= next_boss_x;
        //current_boss_y  <= next_boss_y;
    end 
end 

// BOSS ATTACK 변수 
wire [9:0]  boss_attack_b, boss_attack_t ,boss_attack_r, boss_attack_l;
reg [9:0] current_boss_attack_x, current_boss_attack_y, next_boss_attack_x ,next_boss_attack_y;
wire boss_attack_on;

assign boss_attack_on = (x>=  boss_attack_l && x<= boss_attack_r && y >=  boss_attack_t && y <= boss_attack_b) ? 1:0;

assign boss_attack_b = current_boss_attack_y + 20;
assign boss_attack_t = current_boss_attack_y;
assign boss_attack_l = current_boss_attack_x;
assign boss_attack_r = current_boss_attack_x + 20;


// BOSS_ATTACK algorithm
always @(*) begin 
    if (frame_tick) begin 
        //next_boss_attack_x = current_boss_attack_x + 3;
        next_boss_attack_y = current_boss_attack_y + 3;
    end 
    else begin
        next_boss_attack_x = current_boss_attack_x;
        next_boss_attack_y = current_boss_attack_y;
    end
end

always @(posedge clk or posedge rst) begin
    if (rst) begin
        current_boss_attack_x  <= current_boss_x;
        current_boss_attack_y  <= current_boss_y;
    end 
    else begin 
        current_boss_attack_x  <= next_boss_attack_x;
        current_boss_attack_y <= next_boss_attack_y;
    end 
end 

//random #(.leng(7)) random_inst(clk, rst, 20'hABCE, rand8);
//wire [7:0] rand8;
//assign item = (c_state == PLAYER_TURN && player_item < 3) ? rand8 % 5 : (c_state == PLAYER_TURN && dealer_item < 3) ? rand3 % 5 + 5 : 10;
//assign init_load = (c_state == PLAYER_TURN && bullets <= 0) ? rand8 : 0;

// Player가 공격을 받은 경우
wire hit_BtoP1_bullet;  // player 1가 공격을 맞았을 때 
wire hit_BtoP2_bullet;  // player 2가 공격을 맞았을 때
wire player1die;        // player 1이 죽은 경우 
wire player2die;        // player 2이 죽은 경우

reg [1:0] next_player1_hp, player1_hp;
reg [1:0] next_player2_hp, player2_hp;

// Boss의 공격을 받았을 때
wire attack_BtoP1;    // player 1가 공격을 맞았을 때 
wire attack_BtoP2;    // player 1가 공격을 맞았을 때 

// Boss의 공격 처리
assign attack_BtoP1 = (boss_attack_l <= player1_r && boss_attack_r >= player1_l &&
                       boss_attack_t <= player1_b && boss_attack_b >= player1_t) ? 1 : 0;
assign attack_BtoP2 = (boss_attack_l <= player2_r && boss_attack_r >= player2_l &&
                       boss_attack_t <= player2_b && boss_attack_b >= player2_t) ? 1 : 0;

// Boss와 Player가 충돌했을 때 
wire collision_BandP1;  // player 1가 충돌했을 때
wire collision_BandP2;  // player 2가 충돌했을 때

// Boss와 Player의 충돌 처리
assign collision_BandP1 = (player1_l <= boss_r && player1_r >= boss_l &&
                           player1_t <= boss_b && player1_b >= boss_t) ? 1 : 0;
                           
assign collision_BandP2 = (player2_l <= boss_r && player2_r >= boss_l &&
                           player2_t <= boss_b && player2_b >= boss_t) ? 1 : 0;



always @(*) begin 
    if (hit_P1toB_bullet) begin 
        n_boss_hp_x_l = c_boss_hp_x_l - 5; 
    end
    else if(hit_P2toB_bullet) begin
        n_boss_hp_x_l = c_boss_hp_x_l - 5; 
    end
    else 
        n_boss_hp_x_l = c_boss_hp_x_l; 
end

always @(posedge clk or posedge rst) begin 
    if (rst) begin 
        c_boss_hp_x_l <= BOSS_HP_BAR_MAX;
    end
    else if (frame_tick == 1) begin
        c_boss_hp_x_l <= n_boss_hp_x_l;
    end
end


// player 1 체력 감소 Logic
always @(*) begin 
    if (collision_BandP1 && player1_hp > 0) begin 
        next_player1_hp = player1_hp - 1;
    end
    else if(attack_BtoP1 && player1_hp > 0) begin
        next_player1_hp = player1_hp - 1; 
    end
    else 
        next_player1_hp = player1_hp; 
end

always @(posedge clk or posedge rst) begin 
    if (rst) begin 
        player1_hp <= 3;
    end
    else if (halfsec_frame_tick == 1) begin
        player1_hp = next_player1_hp;
    end
end

// player 2 체력 감소 Logic
always @(*) begin 
    if (collision_BandP2 && player2_hp > 0) begin 
        next_player2_hp = player2_hp - 1;
    end
    else if(attack_BtoP2 && player2_hp > 0) begin
        next_player2_hp = player2_hp - 1; 
    end
    else 
        next_player2_hp = player2_hp; 
end

always @(posedge clk or posedge rst) begin 
    if (rst) begin 
        player2_hp <= 3;
    end
    else if (halfsec_frame_tick == 1) begin
        player2_hp = next_player2_hp;
    end
end

// 플레이어가 체력이 0인 경우 죽음 플래그 설정
assign player1_die = (player1_hp == 0);
assign player2_die = (player2_hp == 0);
assign boss_die = (c_boss_hp_x_l == BOSS_HP_BAR_X);



// Reset Button [Key 4] 
wire restart;
parameter NEWGAME = 2'b00, PLAY = 2'b01, GAME_OVER = 2'b10, CLEAR = 2'b11;
reg [1:0] c_state, n_state; 
reg [1:0] life_next, life_current;

assign restart = (c_state == GAME_OVER && key_pulse == 5'h14) ? 1 : 0;

always @(*) begin
    n_state = c_state;
    life_next = life_current;
    case (c_state)
        NEWGAME : begin
            if (key_pulse == 5'h11) begin
                n_state = PLAY;
            end
        end

        PLAY : begin
            if(player1_die == 1 && player2_die == 1) begin
                n_state = GAME_OVER;
            end
            else if(boss_die == 1) begin
                n_state = CLEAR;
            end
            else 
                n_state = c_state;
       end
        
        GAME_OVER : begin 
            if(key_pulse == 5'h11) begin
                n_state = NEWGAME;
            end
            else 
                n_state = c_state;
        end 
        CLEAR : begin 
            if(key_pulse == 5'h11) begin
                n_state = NEWGAME;
            end
            else 
                n_state = c_state;
        end       
    endcase
end


/*
// ---------------------------------------------------
// TIME POSITION
// ---------------------------------------------------
wire [9:0] time_x_l, time_y_t;
assign time_x_l = 519;
assign time_y_t = 143;
assign time_on = (y>=time_y_t && y<time_y_t+16 && x>=time_x_l && x<time_x_l+8*7)? 1 : 0;
assign row_addr_t = y-time_y_t;
always @(*) begin
    if (x>=time_x_l+8*0 && x<time_x_l+8*1) begin bit_addr_t = (x-time_x_l-8*0); char_addr_t = 7'b1010100; end // T
    else if (x>=time_x_l+8*1 && x<time_x_l+8*2) begin bit_addr_t = (x-time_x_l-8*1); char_addr_t = 7'b1001001; end // I
    else if (x>=time_x_l+8*2 && x<time_x_l+8*3) begin bit_addr_t = (x-time_x_l-8*2); char_addr_t = 7'b1001101; end // M
    else if (x>=time_x_l+8*3 && x<time_x_l+8*4) begin bit_addr_t = (x-time_x_l-8*3); char_addr_t = 7'b1000101; end // E
    else if (x>=time_x_l+8*4 && x<time_x_l+8*5) begin bit_addr_t = (x-time_x_l-8*4); char_addr_t = 7'b0111010; end // : x3a
    else if (x>=time_x_l+8*5 && x<time_x_l+8*6) begin bit_addr_t = (x-time_x_l-8*5); char_addr_t = {3'b011, time1}; end // digit 10, ASCII 코드에서 숫자의 address는 011로 시작
    else if (x>=time_x_l+8*6 && x<time_x_l+8*7) begin bit_addr_t = (x-time_x_l-8*6); char_addr_t = {3'b011, time2}; end // digit 1
    else begin bit_addr_t = 0; char_addr_t = 0; end  
end


// ---------------------------------------------------
// GAME OVER
// ---------------------------------------------------
wire over_trig;
assign over_trig = (game_over || time_trig)? 1:0;
assign over_on = (over_trig==1 && y[9:6]==3 && x[9:5]>=5 && x[9:5]<=13)? 1 : 0; //y축 좌표 192 크기는 16픽셀, x방향으로 4배(32픽셀) 늘리고 글자9개 넣음
assign row_addr_o = y[5:2];
always @(*) begin
    bit_addr_o = x[4:2];
    case (x[9:5])
        5: char_addr_o = 7'b1000111; // G x47
        6: char_addr_o = 7'b1100001; // a x61
        7: char_addr_o = 7'b1101101; // m x6d
        8: char_addr_o = 7'b1100101; // e x65
        9: char_addr_o = 7'b0000000; //                      
        10: char_addr_o = 7'b1001111; // O x4f
        11: char_addr_o = 7'b1110110; // v x76
        12: char_addr_o = 7'b1100101; // e x65
        13: char_addr_o = 7'b1110010; // r x72
        default: char_addr_o = 0;
    endcase
end
*/



// ---------------------------------------------------
// GRAPIC CODE
// ---------------------------------------------------


// PLAYER TEXT
wire [6:0] char_addr;
reg [6:0] char_addr_player1, char_addr_player2,char_addr_l, char_addr_o;
wire [2:0] bit_addr;
reg [2:0] bit_addr_player1, bit_addr_player2,bit_addr_l, bit_addr_o;
wire [3:0] row_addr, row_addr_player1, row_addr_player2,row_addr_l, row_addr_o; 
wire player1_on, player2_on, score_on, life_on, over_on;

wire font_bit;
wire [7:0] font_word;
wire [10:0] rom_addr;

assign rom_addr = {char_addr, row_addr};
assign font_bit = font_word[~bit_addr]; //화면 x좌표는 왼쪽이 작은데, rom의 bit는 오른쪽이 작으므로 reverse

assign char_addr = (player1_font_on)? char_addr_player1 :(player2_font_on)? char_addr_player2: (PLAYER_LIFE1_on) ? PLAYER_LIFE1_char_addr : (PLAYER_LIFE2_on) ? PLAYER_LIFE2_char_addr : (PLAYER_LIFE3_on) ? PLAYER_LIFE3_char_addr : 
                    (PLAYER_LIFE4_on) ? PLAYER_LIFE4_char_addr : (PLAYER_LIFE5_on) ? PLAYER_LIFE5_char_addr : (PLAYER_LIFE6_on) ? PLAYER_LIFE6_char_addr : (life_on)? char_addr_l : (over_on)? char_addr_o : 0;
assign row_addr = (player1_font_on)? row_addr_player1 : (player2_font_on)? row_addr_player2 :  (PLAYER_LIFE1_on) ? PLAYER_LIFE1_row_addr : (PLAYER_LIFE2_on) ? PLAYER_LIFE2_row_addr : (PLAYER_LIFE3_on) ? PLAYER_LIFE3_row_addr : 
                    (PLAYER_LIFE4_on) ? PLAYER_LIFE4_row_addr : (PLAYER_LIFE5_on) ? PLAYER_LIFE5_row_addr : (PLAYER_LIFE6_on) ? PLAYER_LIFE6_row_addr :(life_on)? row_addr_l : (over_on)? row_addr_o : 0; 
assign bit_addr = (player1_font_on)? bit_addr_player1 : (player2_font_on)? bit_addr_player2 :  (PLAYER_LIFE1_on) ? PLAYER_LIFE1_bit_addr : (PLAYER_LIFE2_on) ? PLAYER_LIFE2_bit_addr : (PLAYER_LIFE3_on) ? PLAYER_LIFE3_bit_addr : 
                    (PLAYER_LIFE4_on) ? PLAYER_LIFE4_bit_addr : (PLAYER_LIFE5_on) ? PLAYER_LIFE5_bit_addr : (PLAYER_LIFE6_on) ? PLAYER_LIFE6_bit_addr :(life_on)? bit_addr_l : (over_on)? bit_addr_o : 0; 


// PLAYER1
wire [9:0] player1_font_x_l, player1_font_y_t;
assign player1_font_x_l = 100; 
assign player1_font_y_t = 0; 
assign player1_font_on = (y>=player1_font_y_t && y<player1_font_y_t + 16 && x>=player1_font_x_l && x<player1_font_x_l+8*7)? 1 : 0; 
assign row_addr_player1 = y-player1_font_y_t;
always @ (*) begin
    if (x>=player1_font_x_l+8*0 && x<player1_font_x_l+8*1) begin bit_addr_player1 = x-player1_font_x_l-8*0; char_addr_player1 = 7'b1010000; end // P x59    
    else if (x>=player1_font_x_l+8*1 && x<player1_font_x_l+8*2) begin bit_addr_player1 = x-player1_font_x_l-8*1; char_addr_player1 = 7'b1001100; end // L x4C
    else if (x>=player1_font_x_l+8*2 && x<player1_font_x_l+8*3) begin bit_addr_player1 = x-player1_font_x_l-8*2; char_addr_player1 = 7'b1000001; end  // A 41
    else if (x>=player1_font_x_l+8*3 && x<player1_font_x_l+8*4) begin bit_addr_player1 = x-player1_font_x_l-8*3; char_addr_player1 = 7'b1011001; end // Y x59
    else if (x>=player1_font_x_l+8*4 && x<player1_font_x_l+8*5) begin bit_addr_player1 = x-player1_font_x_l-8*4; char_addr_player1 = 7'b1000101; end // E x45 
    else if (x>=player1_font_x_l+8*5 && x<player1_font_x_l+8*6) begin bit_addr_player1 = x-player1_font_x_l-8*5; char_addr_player1 = 7'b1010010; end // R x52
    else if (x>=player1_font_x_l+8*6 && x<player1_font_x_l+8*7) begin bit_addr_player1 = x-player1_font_x_l-8*6; char_addr_player1 = 7'b0110001; end // 1 x30
    
    else begin bit_addr_player1 = 0; char_addr_player1 = 0; end                         
end

// PLAYER2
wire [9:0] player2_font_x_l, player2_font_y_t;
assign player2_font_x_l = 500; 
assign player2_font_y_t = 0; 
assign player2_font_on = (y>=player2_font_y_t && y<player2_font_y_t + 16 && x>=player2_font_x_l && x<player2_font_x_l+8*7)? 1 : 0; 
assign row_addr_player2 = y-player2_font_y_t;
always @ (*) begin
    if (x>=player2_font_x_l+8*0 && x<player2_font_x_l+8*1) begin bit_addr_player2 = x-player1_font_x_l-8*0; char_addr_player2 = 7'b1010000; end // P x59    
    else if (x>=player2_font_x_l+8*1 && x<player2_font_x_l+8*2) begin bit_addr_player2 = x-player2_font_x_l-8*1; char_addr_player2 = 7'b1001100; end // L x4C
    else if (x>=player2_font_x_l+8*2 && x<player2_font_x_l+8*3) begin bit_addr_player2 = x-player2_font_x_l-8*2; char_addr_player2 = 7'b1000001; end  // A 41
    else if (x>=player2_font_x_l+8*3 && x<player2_font_x_l+8*4) begin bit_addr_player2 = x-player2_font_x_l-8*3; char_addr_player2 = 7'b1011001; end // Y x59
    else if (x>=player2_font_x_l+8*4 && x<player2_font_x_l+8*5) begin bit_addr_player2 = x-player2_font_x_l-8*4; char_addr_player2 = 7'b1000101; end // E x45 
    else if (x>=player2_font_x_l+8*5 && x<player2_font_x_l+8*6) begin bit_addr_player2 = x-player2_font_x_l-8*5; char_addr_player2 = 7'b1010010; end // R x52
    else if (x>=player2_font_x_l+8*6 && x<player2_font_x_l+8*7) begin bit_addr_player2 = x-player2_font_x_l-8*6; char_addr_player2 = 7'b0110010; end // 2 x31
    
    else begin bit_addr_player2 = 0; char_addr_player2 = 0; end                         
end

// PLAYER LIFE 1 
wire [9:0] PLAYER_LIFE1_x_l, PLAYER_LIFE1_y_t;
reg [6:0] PLAYER_LIFE1_char_addr;
wire [3:0] PLAYER_LIFE1_row_addr;
reg [2:0] PLAYER_LIFE1_bit_addr;
wire PLAYER_LIFE1_on;
assign PLAYER_LIFE1_x_l = 100; assign PLAYER_LIFE1_y_t = 20; 
assign PLAYER_LIFE1_on = (y>=PLAYER_LIFE1_y_t && y<PLAYER_LIFE1_y_t+32 && x>=PLAYER_LIFE1_x_l && x<PLAYER_LIFE1_x_l+16 && player1_hp >= 1)? 1 : 0; 
assign PLAYER_LIFE1_row_addr = (y-PLAYER_LIFE1_y_t)>>1; 
always @(*) begin
    if (x>=PLAYER_LIFE1_x_l && x<PLAYER_LIFE1_x_l+16*1) begin PLAYER_LIFE1_bit_addr = (x-PLAYER_LIFE1_x_l)>>1; PLAYER_LIFE1_char_addr = 7'b0000011; end // x20
    else begin PLAYER_LIFE1_bit_addr = 0; PLAYER_LIFE1_char_addr = 0; end
end

// PLAYER LIFE 2
wire [9:0] PLAYER_LIFE2_x_l, PLAYER_LIFE2_y_t;
reg [6:0] PLAYER_LIFE2_char_addr;
wire [3:0] PLAYER_LIFE2_row_addr;
reg [2:0] PLAYER_LIFE2_bit_addr;
wire PLAYER_LIFE2_on;
assign PLAYER_LIFE2_x_l = 120; assign PLAYER_LIFE2_y_t = 20; 
assign PLAYER_LIFE2_on = (y>=PLAYER_LIFE2_y_t && y<PLAYER_LIFE2_y_t+32 && x>=PLAYER_LIFE2_x_l && x<PLAYER_LIFE2_x_l+16 && player1_hp >= 2)? 1 : 0; 
assign PLAYER_LIFE2_row_addr = (y-PLAYER_LIFE2_y_t)>>1; 
always @(*) begin
    if (x>=PLAYER_LIFE2_x_l && x<PLAYER_LIFE2_x_l+16*1) begin PLAYER_LIFE2_bit_addr = (x-PLAYER_LIFE2_x_l)>>1; PLAYER_LIFE2_char_addr = 7'b0000011; end // x20
    else begin PLAYER_LIFE2_bit_addr = 0; PLAYER_LIFE2_char_addr = 0; end
end

// PLAYER LIFE 3 
wire [9:0] PLAYER_LIFE3_x_l, PLAYER_LIFE3_y_t;
reg [6:0] PLAYER_LIFE3_char_addr;
wire [3:0] PLAYER_LIFE3_row_addr;
reg [2:0] PLAYER_LIFE3_bit_addr;
wire PLAYER_LIFE3_on;
assign PLAYER_LIFE3_x_l = 140; assign PLAYER_LIFE3_y_t = 20; 
assign PLAYER_LIFE3_on = (y>=PLAYER_LIFE3_y_t && y<PLAYER_LIFE3_y_t+32 && x>=PLAYER_LIFE3_x_l && x<PLAYER_LIFE3_x_l+16 && player1_hp >= 3)? 1 : 0; 
assign PLAYER_LIFE3_row_addr = (y-PLAYER_LIFE3_y_t)>>1; 
always @(*) begin
    if (x>=PLAYER_LIFE3_x_l && x<PLAYER_LIFE3_x_l+16*1) begin PLAYER_LIFE3_bit_addr = (x-PLAYER_LIFE3_x_l)>>1; PLAYER_LIFE3_char_addr = 7'b0000011; end // x20
    else begin PLAYER_LIFE3_bit_addr = 0; PLAYER_LIFE3_char_addr = 0; end
end

// PLAYER LIFE 4 
wire [9:0] PLAYER_LIFE4_x_l, PLAYER_LIFE4_y_t;
reg [6:0] PLAYER_LIFE4_char_addr;
wire [3:0] PLAYER_LIFE4_row_addr;
reg [2:0] PLAYER_LIFE4_bit_addr;
wire PLAYER_LIFE4_on;
assign PLAYER_LIFE4_x_l = 500; assign PLAYER_LIFE4_y_t = 20; 
assign PLAYER_LIFE4_on = (y>=PLAYER_LIFE4_y_t && y<PLAYER_LIFE4_y_t+32 && x>=PLAYER_LIFE4_x_l && x<PLAYER_LIFE4_x_l+16 && player2_hp >= 1)? 1 : 0; 
assign PLAYER_LIFE4_row_addr = (y-PLAYER_LIFE1_y_t)>>1; 
always @(*) begin
    if (x>=PLAYER_LIFE4_x_l && x<PLAYER_LIFE4_x_l+16*1) begin PLAYER_LIFE4_bit_addr = (x-PLAYER_LIFE4_x_l)>>1; PLAYER_LIFE4_char_addr = 7'b0000011; end // x20
    else begin PLAYER_LIFE4_bit_addr = 0; PLAYER_LIFE4_char_addr = 0; end
end

// PLAYER LIFE 5 
wire [9:0] PLAYER_LIFE5_x_l, PLAYER_LIFE5_y_t;
reg [6:0] PLAYER_LIFE5_char_addr;
wire [3:0] PLAYER_LIFE5_row_addr;
reg [2:0] PLAYER_LIFE5_bit_addr;
wire PLAYER_LIFE5_on;
assign PLAYER_LIFE5_x_l = 520; assign PLAYER_LIFE5_y_t = 20; 
assign PLAYER_LIFE5_on = (y>=PLAYER_LIFE5_y_t && y<PLAYER_LIFE5_y_t+32 && x>=PLAYER_LIFE5_x_l && x<PLAYER_LIFE5_x_l+16 && player2_hp >= 2 )? 1 : 0; 
assign PLAYER_LIFE5_row_addr = (y-PLAYER_LIFE5_y_t)>>1; 
always @(*) begin
    if (x>=PLAYER_LIFE5_x_l && x<PLAYER_LIFE5_x_l+16*1) begin PLAYER_LIFE5_bit_addr = (x-PLAYER_LIFE5_x_l)>>1; PLAYER_LIFE5_char_addr = 7'b0000011; end // x20
    else begin PLAYER_LIFE5_bit_addr = 0; PLAYER_LIFE5_char_addr = 0; end
end

// PLAYER LIFE 6 
wire [9:0] PLAYER_LIFE6_x_l, PLAYER_LIFE6_y_t;
reg [6:0] PLAYER_LIFE6_char_addr;
wire [3:0] PLAYER_LIFE6_row_addr;
reg [2:0] PLAYER_LIFE6_bit_addr;
wire PLAYER_LIFE6_on;
assign PLAYER_LIFE6_x_l = 540; assign PLAYER_LIFE6_y_t = 20; 
assign PLAYER_LIFE6_on = (y>=PLAYER_LIFE6_y_t && y<PLAYER_LIFE6_y_t+32 && x>=PLAYER_LIFE6_x_l && x<PLAYER_LIFE6_x_l+16 && player2_hp >= 3)? 1 : 0; 
assign PLAYER_LIFE6_row_addr = (y-PLAYER_LIFE6_y_t)>>1; 
always @(*) begin
    if (x>=PLAYER_LIFE6_x_l && x<PLAYER_LIFE6_x_l+16*1) begin PLAYER_LIFE6_bit_addr = (x-PLAYER_LIFE6_x_l)>>1; PLAYER_LIFE6_char_addr = 7'b0000011; end // x20
    else begin PLAYER_LIFE6_bit_addr = 0; PLAYER_LIFE6_char_addr = 0; end
end
//------------------------------------------
// Player 1 Grapic
//------------------------------------------

// Hair (검은색)
wire  player1_hair0_on, player1_hair1_on, player1_hair2_on, player1_hair3_on, player1_hair4_on, player1_hair5_0_on, player1_hair5_1_on, player1_hair6_0_on, player1_hair6_1_on, player1_hair7_0_on, player1_hair7_1_on, player1_hair8_0_on, player1_hair8_1_on, player1_hair9_0_on, player1_hair9_1_on, player1_hair10_0_on, player1_hair10_1_on, player1_hair11_0_on, player1_hair11_1_on;

assign player1_hair0_on =  (x <= player1_l + 20 && x >= player1_l + 10 && y >= player1_t && y <= player1_t + 1) ? 1:0;
assign player1_hair1_on =  (x <= player1_l + 21 && x >= player1_l + 9 && y >= player1_t+1 && y <= player1_t + 2) ? 1:0;
assign player1_hair2_on =  (x <= player1_l + 22 && x >= player1_l + 8 && y >= player1_t+2 && y <= player1_t + 3) ? 1:0;
assign player1_hair3_on =  (x <= player1_l + 23 && x >= player1_l + 7 && y >= player1_t+3 && y <= player1_t + 4) ? 1:0;
assign player1_hair4_on =  (x <= player1_l + 23 && x >= player1_l + 6 && y >= player1_t+4 && y <= player1_t + 5) ? 1:0;
assign player1_hair5_0_on =  (x <= player1_l + 10 && x >= player1_l + 5 && y >= player1_t+5 && y <= player1_t + 6) ? 1:0;
assign player1_hair5_1_on =  (x <= player1_l + 24 && x >= player1_l + 15 && y >= player1_t+5 && y <= player1_t + 6) ? 1:0;
assign player1_hair6_0_on =  (x <= player1_l + 9 && x >= player1_l + 5 && y >= player1_t+6 && y <= player1_t + 7) ? 1:0;
assign player1_hair6_1_on =  (x <= player1_l + 24 && x >= player1_l + 17 && y >= player1_t+6 && y <= player1_t + 7) ? 1:0;
assign player1_hair7_0_on =  (x <= player1_l + 8 && x >= player1_l + 4 && y >= player1_t+7 && y <= player1_t + 8) ? 1:0;
assign player1_hair7_1_on =  (x <= player1_l + 24 && x >= player1_l + 19 && y >= player1_t+7 && y <= player1_t + 8) ? 1:0;
assign player1_hair8_0_on =  (x <= player1_l + 8 && x >= player1_l + 4 && y >= player1_t+8 && y <= player1_t + 9) ? 1:0;
assign player1_hair8_1_on =  (x <= player1_l + 24 && x >= player1_l + 19 && y >= player1_t+8 && y <= player1_t + 9) ? 1:0;
assign player1_hair9_0_on =  (x <= player1_l + 8 && x >= player1_l + 4 && y >= player1_t+9 && y <= player1_t + 10) ? 1:0;
assign player1_hair9_1_on =  (x <= player1_l + 24 && x >= player1_l + 22 && y >= player1_t+9 && y <= player1_t + 10) ? 1:0;
assign player1_hair10_0_on =  (x <= player1_l + 7 && x >= player1_l + 4 && y >= player1_t+10 && y <= player1_t + 11) ? 1:0;
assign player1_hair10_1_on =  (x <= player1_l + 24 && x >= player1_l + 22 && y >= player1_t+10 && y <= player1_t + 11) ? 1:0;
assign player1_hair11_0_on =  (x <= player1_l + 7 && x >= player1_l + 4 && y >= player1_t+11 && y <= player1_t + 12) ? 1:0;
assign player1_hair11_1_on =  (x <= player1_l + 24 && x >= player1_l + 23 && y >= player1_t+11 && y <= player1_t + 12) ? 1:0;

wire player1_face0_on, player1_face1_on, player1_face2_on, player1_face3_on, player1_face4_on, player1_face5_on, player1_face6_on, player1_face7_0_on, player1_face7_1_on, player1_face7_3_on, player1_face8_0_on, player1_face8_1_on, player1_face8_3_on, player1_face9_on, player1_face10_on, player1_face11_on, player1_face12_on, player1_face13_on;

assign player1_face0_on = (x <= player1_l + 14 && x >= player1_l + 10 && y >= player1_t+6 && y <= player1_t + 7) ? 1:0;
assign player1_face1_on = (x <= player1_l + 17 && x >= player1_l + 9 && y >= player1_t+7 && y <= player1_t + 8) ? 1:0;
assign player1_face2_on = (x <= player1_l + 19 && x >= player1_l + 8 && y >= player1_t+8 && y <= player1_t + 9) ? 1:0;
assign player1_face3_on = (x <= player1_l + 21 && x >= player1_l + 8 && y >= player1_t+9 && y <= player1_t + 10) ? 1:0;
assign player1_face4_on = (x <= player1_l + 22 && x >= player1_l + 8 && y >= player1_t+10 && y <= player1_t + 11) ? 1:0;
assign player1_face5_on = (x <= player1_l + 23 && x >= player1_l + 7 && y >= player1_t+11 && y <= player1_t + 12) ? 1:0;
assign player1_face6_on = (x <= player1_l + 24 && x >= player1_l + 7 && y >= player1_t+12 && y <= player1_t + 13) ? 1:0;
assign player1_face7_0_on = (x <= player1_l + 9 && x >= player1_l + 7 && y >= player1_t+13 && y <= player1_t + 14) ? 1:0;
assign player1_face7_1_on = (x <= player1_l + 17 && x >= player1_l + 13 && y >= player1_t+13 && y <= player1_t + 14) ? 1:0;
assign player1_face7_3_on = (x <= player1_l + 24 && x >= player1_l + 21 && y >= player1_t+13 && y <= player1_t + 14) ? 1:0;

assign player1_face8_0_on = (x <= player1_l + 9 && x >= player1_l + 5 && y >= player1_t+14 && y <= player1_t + 15) ? 1:0;
assign player1_face8_1_on = (x <= player1_l + 17 && x >= player1_l + 13 && y >= player1_t+14 && y <= player1_t + 15) ? 1:0;
assign player1_face8_3_on = (x <= player1_l + 24 && x >= player1_l + 21 && y >= player1_t+14 && y <= player1_t + 15) ? 1:0;

// 입 구현하고 싶으면 이 부분 수정
assign player1_face9_on = (x <= player1_l + 24 && x >= player1_l + 5 && y >= player1_t+15 && y <= player1_t + 16) ? 1:0;
assign player1_face10_on = (x <= player1_l + 23 && x >= player1_l + 6 && y >= player1_t+16 && y <= player1_t + 17) ? 1:0;
assign player1_face11_on = (x <= player1_l + 22 && x >= player1_l + 7 && y >= player1_t+17 && y <= player1_t + 18) ? 1:0;
assign player1_face12_on = (x <= player1_l + 21 && x >= player1_l + 8 && y >= player1_t+18 && y <= player1_t + 19) ? 1:0;
assign player1_face13_on = (x <= player1_l + 20 && x >= player1_l + 9 && y >= player1_t+19 && y <= player1_t + 20) ? 1:0;



// 옷 검은색 
wire player1_cloth0_on, player1_cloth1_on, player1_cloth2_on, player1_cloth3_on, player1_cloth4_on, player1_cloth5_on, 
     player1_cloth6_on, player1_cloth7_on, player1_cloth8_on, player1_cloth9_on, player1_cloth10_on, player1_cloth11_on, 
     player1_cloth12_on, player1_cloth13_on, player1_cloth14_on, player1_cloth15_on, player1_cloth16_on, player1_cloth17_on, 
     player1_cloth18_on, player1_cloth19_on, player1_cloth20_0_on, player1_cloth20_1_on, player1_cloth21_0_on, player1_cloth21_1_on, 
     player1_cloth22_0_on, player1_cloth22_1_on, player1_cloth23_0_on, player1_cloth23_1_on, player1_cloth24_0_on, player1_cloth24_1_on, 
     player1_cloth25_0_on, player1_cloth25_1_on, player1_cloth26_0_on, player1_cloth26_1_on, player1_cloth27_0_on, player1_cloth27_1_on, 
     player1_cloth28_0_on, player1_cloth28_1_on, player1_cloth29_0_on, player1_cloth29_1_on, player1_cloth30_0_on, player1_cloth30_1_on, 
     player1_cloth31_0_on, player1_cloth31_1_on, player1_cloth32_0_on, player1_cloth32_1_on, player1_cloth33_0_on, player1_cloth33_1_on, player1_cloth34_0_on, player1_cloth34_1_on;

assign player1_cloth0_on = (x <= player1_l + 21 && x >= player1_l + 9 && y >= player1_t+20 && y <= player1_t + 21) ? 1:0;
assign player1_cloth1_on = (x <= player1_l + 21 && x >= player1_l + 9 && y >= player1_t+21 && y <= player1_t + 22) ? 1:0;
assign player1_cloth2_on = (x <= player1_l + 21 && x >= player1_l + 9 && y >= player1_t+22 && y <= player1_t + 23) ? 1:0;
assign player1_cloth3_on = (x <= player1_l + 21 && x >= player1_l + 9 && y >= player1_t+23 && y <= player1_t + 24) ? 1:0;
assign player1_cloth4_on = (x <= player1_l + 21 && x >= player1_l + 9 && y >= player1_t+24 && y <= player1_t + 25) ? 1:0;
assign player1_cloth5_on = (x <= player1_l + 21 && x >= player1_l + 9 && y >= player1_t+25 && y <= player1_t + 26) ? 1:0;
assign player1_cloth6_on = (x <= player1_l + 21 && x >= player1_l + 9 && y >= player1_t+26 && y <= player1_t + 27) ? 1:0;
assign player1_cloth7_on = (x <= player1_l + 21 && x >= player1_l + 9 && y >= player1_t+27 && y <= player1_t + 28) ? 1:0;
assign player1_cloth8_on = (x <= player1_l + 21 && x >= player1_l + 9 && y >= player1_t+28 && y <= player1_t + 29) ? 1:0;
assign player1_cloth9_on = (x <= player1_l + 21 && x >= player1_l + 9 && y >= player1_t+29 && y <= player1_t + 30) ? 1:0;
assign player1_cloth10_on = (x <= player1_l + 21 && x >= player1_l + 9 && y >= player1_t+30 && y <= player1_t + 31) ? 1:0;
assign player1_cloth11_on = (x <= player1_l + 21 && x >= player1_l + 9 && y >= player1_t+31 && y <= player1_t + 32) ? 1:0;
assign player1_cloth12_on = (x <= player1_l + 21 && x >= player1_l + 9 && y >= player1_t+32 && y <= player1_t + 33) ? 1:0;
assign player1_cloth13_on = (x <= player1_l + 22 && x >= player1_l + 8 && y >= player1_t+33 && y <= player1_t + 34) ? 1:0;
assign player1_cloth14_on = (x <= player1_l + 22 && x >= player1_l + 8 && y >= player1_t+34 && y <= player1_t + 35) ? 1:0;
assign player1_cloth15_on = (x <= player1_l + 22 && x >= player1_l + 8 && y >= player1_t+35 && y <= player1_t + 36) ? 1:0;
assign player1_cloth16_on = (x <= player1_l + 22 && x >= player1_l + 8 && y >= player1_t+36 && y <= player1_t + 37) ? 1:0;
assign player1_cloth17_on = (x <= player1_l + 22 && x >= player1_l + 8 && y >= player1_t+37 && y <= player1_t + 38) ? 1:0;
assign player1_cloth18_on = (x <= player1_l + 22 && x >= player1_l + 8 && y >= player1_t+38 && y <= player1_t + 39) ? 1:0;
assign player1_cloth19_on = (x <= player1_l + 22 && x >= player1_l + 8 && y >= player1_t+39 && y <= player1_t + 40) ? 1:0;
assign player1_cloth20_0_on = (x <= player1_l + 15 && x >= player1_l + 8 && y >= player1_t+40 && y <= player1_t + 41) ? 1:0;
assign player1_cloth20_1_on = (x <= player1_l + 22 && x >= player1_l + 17 && y >= player1_t+40 && y <= player1_t + 41) ? 1:0;
assign player1_cloth21_0_on = (x <= player1_l + 15 && x >= player1_l + 8 && y >= player1_t+41 && y <= player1_t + 42) ? 1:0;
assign player1_cloth21_1_on = (x <= player1_l + 22 && x >= player1_l + 17 && y >= player1_t+41 && y <= player1_t + 42) ? 1:0;
assign player1_cloth22_0_on = (x <= player1_l + 15 && x >= player1_l + 8 && y >= player1_t+42 && y <= player1_t + 43) ? 1:0;
assign player1_cloth22_1_on = (x <= player1_l + 22 && x >= player1_l + 17 && y >= player1_t+42 && y <= player1_t + 43) ? 1:0;
assign player1_cloth23_0_on = (x <= player1_l + 15 && x >= player1_l + 8 && y >= player1_t+43 && y <= player1_t + 44) ? 1:0;
assign player1_cloth23_1_on = (x <= player1_l + 22 && x >= player1_l + 17 && y >= player1_t+43 && y <= player1_t + 44) ? 1:0;
assign player1_cloth24_0_on = (x <= player1_l + 14 && x >= player1_l + 8 && y >= player1_t+44 && y <= player1_t + 45) ? 1:0;
assign player1_cloth24_1_on = (x <= player1_l + 22 && x >= player1_l + 17 && y >= player1_t+44 && y <= player1_t + 45) ? 1:0;
assign player1_cloth25_0_on = (x <= player1_l + 14 && x >= player1_l + 8 && y >= player1_t+45 && y <= player1_t + 46) ? 1:0;
assign player1_cloth25_1_on = (x <= player1_l + 22 && x >= player1_l + 17 && y >= player1_t+45 && y <= player1_t + 46) ? 1:0;
assign player1_cloth26_0_on = (x <= player1_l + 14 && x >= player1_l + 8 && y >= player1_t+46 && y <= player1_t + 47) ? 1:0;
assign player1_cloth26_1_on = (x <= player1_l + 22 && x >= player1_l + 17 && y >= player1_t+46 && y <= player1_t + 47) ? 1:0;
assign player1_cloth27_0_on = (x <= player1_l + 14 && x >= player1_l + 8 && y >= player1_t+47 && y <= player1_t + 48) ? 1:0;
assign player1_cloth27_1_on = (x <= player1_l + 22 && x >= player1_l + 17 && y >= player1_t+47 && y <= player1_t + 48) ? 1:0;
assign player1_cloth28_0_on = (x <= player1_l + 14 && x >= player1_l + 8 && y >= player1_t+48 && y <= player1_t + 49) ? 1:0;
assign player1_cloth28_1_on = (x <= player1_l + 22 && x >= player1_l + 17 && y >= player1_t+48 && y <= player1_t + 49) ? 1:0;
assign player1_cloth29_0_on = (x <= player1_l + 14 && x >= player1_l + 8 && y >= player1_t+49 && y <= player1_t + 50) ? 1:0;
assign player1_cloth29_1_on = (x <= player1_l + 23 && x >= player1_l + 17 && y >= player1_t+49 && y <= player1_t + 50) ? 1:0;
assign player1_cloth30_0_on = (x <= player1_l + 13 && x >= player1_l + 7 && y >= player1_t+50 && y <= player1_t + 51) ? 1:0;
assign player1_cloth30_1_on = (x <= player1_l + 24 && x >= player1_l + 18 && y >= player1_t+50 && y <= player1_t + 51) ? 1:0;
assign player1_cloth31_0_on = (x <= player1_l + 13 && x >= player1_l + 7 && y >= player1_t+51 && y <= player1_t + 52) ? 1:0;
assign player1_cloth31_1_on = (x <= player1_l + 25 && x >= player1_l + 18 && y >= player1_t+51 && y <= player1_t + 52) ? 1:0;
assign player1_cloth32_0_on = (x <= player1_l + 13 && x >= player1_l + 6 && y >= player1_t+52 && y <= player1_t + 53) ? 1:0;
assign player1_cloth32_1_on = (x <= player1_l + 26 && x >= player1_l + 18 && y >= player1_t+52 && y <= player1_t + 53) ? 1:0;
assign player1_cloth33_0_on = (x <= player1_l + 13 && x >= player1_l + 6 && y >= player1_t+53 && y <= player1_t + 54) ? 1:0;
assign player1_cloth33_1_on = (x <= player1_l + 27 && x >= player1_l + 18 && y >= player1_t+53 && y <=player1_t + 54) ? 1:0;
assign player1_cloth34_0_on = (x <= player1_l + 13 && x >= player1_l + 6 && y >= player1_t+54 && y <= player1_t + 55) ? 1:0;
assign player1_cloth34_1_on = (x <= player1_l + 27 && x >= player1_l + 18 && y >= player1_t+54 && y <= player1_t + 55) ? 1:0;

// 검은색
wire player1_arm0_0_on, player1_arm0_1_on, player1_arm1_0_on, player1_arm1_1_on, player1_arm2_0_on, player1_arm2_1_on, player1_arm3_0_on, player1_arm3_1_on, player1_arm4_0_on, player1_arm4_1_on, player1_arm5_0_on, player1_arm5_1_on, player1_arm6_0_on, player1_arm6_1_on, player1_arm7_0_on, player1_arm7_1_on, player1_arm8_0_on, player1_arm8_1_on;

assign player1_arm0_0_on = (x <= player1_l + 9 && x >= player1_l + 7 && y >= player1_t+20 && y <= player1_t + 21) ? 1:0;
assign player1_arm0_1_on = (x <= player1_l + 23 && x >= player1_l + 21 && y >= player1_t+20 && y <= player1_t + 21) ? 1:0;
assign player1_arm1_0_on = (x <= player1_l + 9 && x >= player1_l + 7 && y >= player1_t+21 && y <= player1_t + 22) ? 1:0;
assign player1_arm1_1_on = (x <= player1_l + 24 && x >= player1_l + 21 && y >= player1_t+21 && y <= player1_t + 22) ? 1:0;
assign player1_arm2_0_on = (x <= player1_l + 9 && x >= player1_l + 6 && y >= player1_t+22 && y <= player1_t + 23) ? 1:0;
assign player1_arm2_1_on = (x <= player1_l + 25 && x >= player1_l + 21 && y >= player1_t+22 && y <= player1_t + 23) ? 1:0;
assign player1_arm3_0_on = (x <= player1_l + 9 && x >= player1_l + 5 && y >= player1_t+23 && y <= player1_t + 24) ? 1:0;
assign player1_arm3_1_on = (x <= player1_l + 26 && x >= player1_l + 22 && y >= player1_t+23 && y <= player1_t + 24) ? 1:0;
assign player1_arm4_0_on = (x <= player1_l + 8  && x >= player1_l + 4  && y >= player1_t+24 && y <= player1_t + 25) ? 1:0;
assign player1_arm4_1_on = (x <= player1_l + 27 && x >= player1_l + 23 && y >= player1_t+24 && y <= player1_t + 25) ? 1:0;
assign player1_arm5_0_on = (x <= player1_l + 7  && x >= player1_l + 3  && y >= player1_t+25 && y <= player1_t + 26) ? 1:0;
assign player1_arm5_1_on = (x <= player1_l + 28 && x >= player1_l + 24 && y >= player1_t+25 && y <= player1_t + 26) ? 1:0;
assign player1_arm6_0_on = (x <= player1_l + 6  && x >= player1_l + 2  && y >= player1_t+26 && y <= player1_t + 27) ? 1:0;
assign player1_arm6_1_on = (x <= player1_l + 29 && x >= player1_l + 25 && y >= player1_t+26 && y <= player1_t + 27) ? 1:0;
assign player1_arm7_0_on = (x <= player1_l + 5  && x >= player1_l + 1  && y >= player1_t+27 && y <= player1_t + 28) ? 1:0;
assign player1_arm7_1_on = (x <= player1_l + 30 && x >= player1_l + 26 && y >= player1_t+27 && y <= player1_t + 28) ? 1:0;
assign player1_arm8_0_on = (x <= player1_l + 5  && x >= player1_l + 1  && y >= player1_t+28 && y <= player1_t + 29) ? 1:0;
assign player1_arm8_1_on = (x <= player1_l + 30 && x >= player1_l + 26 && y >= player1_t+28 && y <= player1_t + 29) ? 1:0;


// 망토
wire player1_cloak0_0_on, player1_cloak0_1_on, player1_cloak1_0_on, player1_cloak1_1_on, player1_cloak2_0_on, player1_cloak2_1_on,
      player1_cloak3_0_on, player1_cloak3_1_on, player1_cloak4_0_on, player1_cloak4_1_on, player1_cloak5_0_on, player1_cloak5_1_on, 
      player1_cloak6_0_on, player1_cloak6_1_on, player1_cloak7_0_on, player1_cloak7_1_on, player1_cloak8_0_on, player1_cloak8_1_on, 
      player1_cloak9_0_on, player1_cloak9_1_on, player1_cloak10_0_on, player1_cloak10_1_on, player1_cloak11_0_on, player1_cloak11_1_on, 
      player1_cloak12_0_on, player1_cloak12_1_on;

assign player1_cloak0_0_on = (x <= player1_l + 9  && x >= player1_l + 8  && y >= player1_t+26 && y <= player1_t + 27) ? 1:0;
assign player1_cloak0_1_on = (x <= player1_l + 23 && x >= player1_l + 22 && y >= player1_t+26 && y <= player1_t + 27) ? 1:0;
assign player1_cloak1_0_on = (x <= player1_l + 9  && x >= player1_l + 7  && y >= player1_t+27 && y <= player1_t + 28) ? 1:0;
assign player1_cloak1_1_on = (x <= player1_l + 24 && x >= player1_l + 22 && y >= player1_t+27 && y <= player1_t + 28) ? 1:0;
assign player1_cloak2_0_on = (x <= player1_l + 9  && x >= player1_l + 6  && y >= player1_t+28 && y <= player1_t + 29) ? 1:0;
assign player1_cloak2_1_on = (x <= player1_l + 24 && x >= player1_l + 22 && y >= player1_t+28 && y <= player1_t + 29) ? 1:0;
assign player1_cloak3_0_on = (x <= player1_l + 9  && x >= player1_l + 5  && y >= player1_t+29 && y <= player1_t + 30) ? 1:0;
assign player1_cloak3_1_on = (x <= player1_l + 25 && x >= player1_l + 22 && y >= player1_t+29 && y <= player1_t + 30) ? 1:0;
assign player1_cloak4_0_on = (x <= player1_l + 9  && x >= player1_l + 4  && y >= player1_t+30 && y <= player1_t + 31) ? 1:0;
assign player1_cloak4_1_on = (x <= player1_l + 25 && x >= player1_l + 22 && y >= player1_t+30 && y <= player1_t + 31) ? 1:0;
assign player1_cloak5_0_on = (x <= player1_l + 9  && x >= player1_l + 4  && y >= player1_t+31 && y <= player1_t + 32) ? 1:0;
assign player1_cloak5_1_on = (x <= player1_l + 25 && x >= player1_l + 22 && y >= player1_t+31 && y <= player1_t + 32) ? 1:0;
assign player1_cloak6_0_on = (x <= player1_l + 8  && x >= player1_l + 4  && y >= player1_t+32 && y <= player1_t + 33) ? 1:0;
assign player1_cloak6_1_on = (x <= player1_l + 25 && x >= player1_l + 23 && y >= player1_t+32 && y <= player1_t + 33) ? 1:0;
assign player1_cloak7_0_on = (x <= player1_l + 8  && x >= player1_l + 4  && y >= player1_t+33 && y <= player1_t + 34) ? 1:0;
assign player1_cloak7_1_on = (x <= player1_l + 25 && x >= player1_l + 23 && y >= player1_t+33 && y <= player1_t + 34) ? 1:0;
assign player1_cloak8_0_on = (x <= player1_l + 8  && x >= player1_l + 4  && y >= player1_t+34 && y <= player1_t + 35) ? 1:0;
assign player1_cloak8_1_on = (x <= player1_l + 25 && x >= player1_l + 23 && y >= player1_t+34 && y <= player1_t + 35) ? 1:0;
assign player1_cloak9_0_on = (x <= player1_l + 8  && x >= player1_l + 4  && y >= player1_t+35 && y <= player1_t + 36) ? 1:0;
assign player1_cloak9_1_on = (x <= player1_l + 25 && x >= player1_l + 23 && y >= player1_t+35 && y <= player1_t + 36) ? 1:0;
assign player1_cloak10_0_on = (x <= player1_l + 8  && x >= player1_l + 4  && y >= player1_t+36 && y <= player1_t + 37) ? 1:0;
assign player1_cloak10_1_on = (x <= player1_l + 25 && x >= player1_l + 23 && y >= player1_t+36 && y <= player1_t + 37) ? 1:0;
assign player1_cloak11_0_on = (x <= player1_l + 8  && x >= player1_l + 4  && y >= player1_t+37 && y <= player1_t + 38) ? 1:0;
assign player1_cloak11_1_on = (x <= player1_l + 25 && x >= player1_l + 23 && y >= player1_t+37 && y <= player1_t + 38) ? 1:0;
assign player1_cloak12_0_on = (x <= player1_l + 6  && x >= player1_l + 3  && y >= player1_t+38 && y <= player1_t + 39) ? 1:0;
assign player1_cloak12_1_on = (x <= player1_l + 28 && x >= player1_l + 26 && y >= player1_t+38 && y <= player1_t + 39) ? 1:0;


//------------------------------------------
// Player 2 Grapic
//------------------------------------------
// Hair (검은색)
wire  player2_hair0_on, player2_hair1_on, player2_hair2_on, player2_hair3_on, player2_hair4_on, player2_hair5_0_on, player2_hair5_1_on, player2_hair6_0_on, player2_hair6_1_on, player2_hair7_0_on, player2_hair7_1_on, player2_hair8_0_on, player2_hair8_1_on, player2_hair9_0_on, player2_hair9_1_on, player2_hair10_0_on, player2_hair10_1_on, player2_hair11_0_on, player2_hair11_1_on;

assign player2_hair0_on =  (x <= player2_l + 20 && x >= player2_l + 10 && y >= player2_t && y <= player2_t + 1) ? 1:0;
assign player2_hair1_on =  (x <= player2_l + 21 && x >= player2_l + 9 && y >= player2_t+1 && y <= player2_t + 2) ? 1:0;
assign player2_hair2_on =  (x <= player2_l + 22 && x >= player2_l + 8 && y >= player2_t+2 && y <= player2_t + 3) ? 1:0;
assign player2_hair3_on =  (x <= player2_l + 23 && x >= player2_l + 7 && y >= player2_t+3 && y <= player2_t + 4) ? 1:0;
assign player2_hair4_on =  (x <= player2_l + 23 && x >= player2_l + 6 && y >= player2_t+4 && y <= player2_t + 5) ? 1:0;
assign player2_hair5_0_on =  (x <= player2_l + 10 && x >= player2_l + 5 && y >= player2_t+5 && y <= player2_t + 6) ? 1:0;
assign player2_hair5_1_on =  (x <= player2_l + 24 && x >= player2_l + 15 && y >= player2_t+5 && y <= player2_t + 6) ? 1:0;
assign player2_hair6_0_on =  (x <= player2_l + 9 && x >= player2_l + 5 && y >= player2_t+6 && y <= player2_t + 7) ? 1:0;
assign player2_hair6_1_on =  (x <= player2_l + 24 && x >= player2_l + 17 && y >= player2_t+6 && y <= player2_t + 7) ? 1:0;
assign player2_hair7_0_on =  (x <= player2_l + 8 && x >= player2_l + 4 && y >= player2_t+7 && y <= player2_t + 8) ? 1:0;
assign player2_hair7_1_on =  (x <= player2_l + 24 && x >= player2_l + 19 && y >= player2_t+7 && y <= player2_t + 8) ? 1:0;
assign player2_hair8_0_on =  (x <= player2_l + 8 && x >= player2_l + 4 && y >= player2_t+8 && y <= player2_t + 9) ? 1:0;
assign player2_hair8_1_on =  (x <= player2_l + 24 && x >= player2_l + 19 && y >= player2_t+8 && y <= player2_t + 9) ? 1:0;
assign player2_hair9_0_on =  (x <= player2_l + 8 && x >= player2_l + 4 && y >= player2_t+9 && y <= player2_t + 10) ? 1:0;
assign player2_hair9_1_on =  (x <= player2_l + 24 && x >= player2_l + 22 && y >= player2_t+9 && y <= player2_t + 10) ? 1:0;
assign player2_hair10_0_on =  (x <= player2_l + 7 && x >= player2_l + 4 && y >= player2_t+10 && y <= player2_t + 11) ? 1:0;
assign player2_hair10_1_on =  (x <= player2_l + 24 && x >= player2_l + 22 && y >= player2_t+10 && y <= player2_t + 11) ? 1:0;
assign player2_hair11_0_on =  (x <= player2_l + 7 && x >= player2_l + 4 && y >= player2_t+11 && y <= player2_t + 12) ? 1:0;
assign player2_hair11_1_on =  (x <= player2_l + 24 && x >= player2_l + 23 && y >= player2_t+11 && y <= player2_t + 12) ? 1:0;

wire player2_face0_on, player2_face1_on, player2_face2_on, player2_face3_on, player2_face4_on, player2_face5_on, player2_face6_on, player2_face7_0_on, player2_face7_1_on, player2_face7_3_on, player2_face8_0_on, player2_face8_1_on, player2_face8_3_on, player2_face9_on, player2_face10_on, player2_face11_on, player2_face12_on, player2_face13_on;

assign player2_face0_on = (x <= player2_l + 14 && x >= player2_l + 10 && y >= player2_t+6 && y <= player2_t + 7) ? 1:0;
assign player2_face1_on = (x <= player2_l + 17 && x >= player2_l + 9 && y >= player2_t+7 && y <= player2_t + 8) ? 1:0;
assign player2_face2_on = (x <= player2_l + 19 && x >= player2_l + 8 && y >= player2_t+8 && y <= player2_t + 9) ? 1:0;
assign player2_face3_on = (x <= player2_l + 21 && x >= player2_l + 8 && y >= player2_t+9 && y <= player2_t + 10) ? 1:0;
assign player2_face4_on = (x <= player2_l + 22 && x >= player2_l + 8 && y >= player2_t+10 && y <= player2_t + 11) ? 1:0;
assign player2_face5_on = (x <= player2_l + 23 && x >= player2_l + 7 && y >= player2_t+11 && y <= player2_t + 12) ? 1:0;
assign player2_face6_on = (x <= player2_l + 24 && x >= player2_l + 7 && y >= player2_t+12 && y <= player2_t + 13) ? 1:0;
assign player2_face7_0_on = (x <= player2_l + 9 && x >= player2_l + 7 && y >= player2_t+13 && y <= player2_t + 14) ? 1:0;
assign player2_face7_1_on = (x <= player2_l + 17 && x >= player2_l + 13 && y >= player2_t+13 && y <= player2_t + 14) ? 1:0;
assign player2_face7_3_on = (x <= player2_l + 24 && x >= player2_l + 21 && y >= player2_t+13 && y <= player2_t + 14) ? 1:0;

assign player2_face8_0_on = (x <= player2_l + 9 && x >= player2_l + 5 && y >= player2_t+14 && y <= player2_t + 15) ? 1:0;
assign player2_face8_1_on = (x <= player2_l + 17 && x >= player2_l + 13 && y >= player2_t+14 && y <= player2_t + 15) ? 1:0;
assign player2_face8_3_on = (x <= player2_l + 24 && x >= player2_l + 21 && y >= player2_t+14 && y <= player2_t + 15) ? 1:0;

// 입 구현하고 싶으면 이 부분 수정
assign player2_face9_on = (x <= player2_l + 24 && x >= player2_l + 5 && y >= player2_t+15 && y <= player2_t + 16) ? 1:0;
assign player2_face10_on = (x <= player2_l + 23 && x >= player2_l + 6 && y >= player2_t+16 && y <= player2_t + 17) ? 1:0;
assign player2_face11_on = (x <= player2_l + 22 && x >= player2_l + 7 && y >= player2_t+17 && y <= player2_t + 18) ? 1:0;
assign player2_face12_on = (x <= player2_l + 21 && x >= player2_l + 8 && y >= player2_t+18 && y <= player2_t + 19) ? 1:0;
assign player2_face13_on = (x <= player2_l + 20 && x >= player2_l + 9 && y >= player2_t+19 && y <= player2_t + 20) ? 1:0;



// 옷 검은색 
wire player2_cloth0_on, player2_cloth1_on, player2_cloth2_on, player2_cloth3_on, player2_cloth4_on, player2_cloth5_on, 
     player2_cloth6_on, player2_cloth7_on, player2_cloth8_on, player2_cloth9_on, player2_cloth10_on, player2_cloth11_on, 
     player2_cloth12_on, player2_cloth13_on, player2_cloth14_on, player2_cloth15_on, player2_cloth16_on, player2_cloth17_on, 
     player2_cloth18_on, player2_cloth19_on, player2_cloth20_0_on, player2_cloth20_1_on, player2_cloth21_0_on, player2_cloth21_1_on, 
     player2_cloth22_0_on, player2_cloth22_1_on, player2_cloth23_0_on, player2_cloth23_1_on, player2_cloth24_0_on, player2_cloth24_1_on, 
     player2_cloth25_0_on, player2_cloth25_1_on, player2_cloth26_0_on, player2_cloth26_1_on, player2_cloth27_0_on, player2_cloth27_1_on, 
     player2_cloth28_0_on, player2_cloth28_1_on, player2_cloth29_0_on, player2_cloth29_1_on, player2_cloth30_0_on, player2_cloth30_1_on, 
     player2_cloth31_0_on, player2_cloth31_1_on, player2_cloth32_0_on, player2_cloth32_1_on, player2_cloth33_0_on, player2_cloth33_1_on, player2_cloth34_0_on, player2_cloth34_1_on;

assign player2_cloth0_on = (x <= pl
